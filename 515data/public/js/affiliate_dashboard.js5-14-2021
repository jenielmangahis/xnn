(function ($, api_url, Vue, swal, axios, location, undefined) {

    const client = commissionEngine.createAccessClient();
    commissionEngine.setupAccessTokenJQueryAjax();

    const vm = new Vue({
        el: ".tool-container",
        data: {
            dtCurrentPeriodOrders: null,
            dtGiftCards: null,
            dtStatusHistory: null,

            currentRankDetailsState: "loaded", // loaded/fetching/error
            current_rank: {
                current_rank: "Spark",
                paid_as_rank: "Spark",
                qta: "Spark",
                pea: 0,
                ta: 0,
                mar: 0,

                next_rank: "Spark",
				needs: [],
				current_rank_deets: []
            },

            titleAchievementBonusState: "loaded", // loaded/fetching/error
            titleAchievementBonus: {
                ranks: [],
                highestRankId: 0,
                nextBonus: 0,
                doubleBonus: {
                    days: 0,
                    hours: 0,
                    rank: null,
                }
			},
			
			qualified: {
				is_qualified: '',
				requirements: ''
			}

        },
        mounted() {
            this.initializeDataTables();
            this.initializeJQueryEvents();
            this.getCurrentRankDetails();
			//this.getTitleAchievementBonus();
			this.getLastThreeMonthsEarnings();
			this.getQualificationRequirementDetails();
        },
        methods: {
            initializeDataTables() {
                let _this = this;

                _this.dtStatusHistory = $("#table-status-history").DataTable({
                    responsive: true,
                    data: [
                        {
                            status: 'Approved, Peeding Flowing',
                            date: 5/1/2020
                        },
                        {
                            status: 'Flowing',
                            date: 5/20/2020
                        },
                        {
                            status: 'Date Cancelled',
                            date: 6/10/2020
                        },
                    ],
                    columns: [
                        { data: 'status' },
                        { data: 'date' }
                    ]
				});
				
                _this.dtCurrentPeriodOrders = $("#table-members").DataTable({
                    // searching: false,
                    // lengthChange: true,
                    processing: true,
                    // serverSide: true,
                    responsive: true,
                    ajax: {
                        url: `${api_url}member/dashboard/my-pea`,
                    },
                    columns: [
                        {data: 'por'},
                        {data: 'customer'},
                        {data: 'account'},
                        {data: 'date_accepted'},
                        {data: 'date_started_flowing'},
                        {data: 'status'},
                        {
                            data: 'energy_account_id',
                            render: function (data, type, row, meta) {
                                return `<a class="btn-status-history" href="#" data-toggle="modal" data-target="#modal-status-history" data-id="`+data+`">Status History</a>`;
                            }
                        }
                    ],
                    order: [[5, 'desc']],
                    columnDefs: [
                        {responsivePriority: 1, targets: 0},
                        {responsivePriority: 2, targets: 1},
                        {responsivePriority: 3, targets: -2},
					],
					drawCallback: function( settings ) {
						$('.btn-status-history').on('click', function () {
							_this.dtStatusHistory.ajax.url(`${api_url}member/dashboard/my-pea-history?energy_account_id=${$(this).data('id')}`).load();
							//_this.dtStatusHistory.ajax.url(`${api_url}member/dashboard/my-pea-history?user_id=50`).load();
							_this.dtStatusHistory.responsive.recalc();
                    		_this.dtStatusHistory.columns.adjust().draw();
						});
					}
                });

            },
            initializeJQueryEvents() {
				let _this = this;
				/*
                $('.status-history').on('click', function () {
					alert($(this).attr('id'));
                    _this.dtStatusHistory.responsive.recalc();
                    _this.dtStatusHistory.columns.adjust().draw();
				});
				*/
            },
            getCurrentRankDetails() {

                if (this.currentRankDetailsState === "fetching") return;

                this.currentRankDetailsState = "fetching";

                this.current_rank.current_rank = "Spark";
                this.current_rank.paid_as_rank = "Spark";
                this.current_rank.next_rank = "Spark";
                this.current_rank.pea = 0;
                this.current_rank.ta = 0;
                this.current_rank.qta = 0;
                this.current_rank.mar = 0;
                this.current_rank.needs = [];

                this.dtStatusHistory.clear().draw();

                client.get("member/dashboard/current-rank-details")
                    .then(response => {
                        let details = response.data;

                        this.current_rank.paid_as_rank = typeof details.paid_as_rank !== "undefined" ? details.paid_as_rank : "Spark";
                        this.current_rank.current_rank = typeof details.current_rank !== "undefined" ? details.current_rank : "Spark";
                        this.current_rank.next_rank = typeof details.next_rank !== "undefined" ? details.next_rank : "Spark";

                        this.current_rank.pea = typeof details.pea !== "undefined" ? details.pea : 0;
                        this.current_rank.ta = typeof details.ta !== "undefined" ? details.ta : 0;
                        this.current_rank.qta = typeof details.qta !== "undefined" ? details.qta : 0;
                        this.current_rank.mar = typeof details.mar !== "undefined" ? details.mar : 0;
                        this.current_rank.needs = typeof details.needs !== "undefined" ? details.needs : [];
                        this.current_rank.current_rank_deets = typeof details.current_rank_deets !== "undefined" ? details.current_rank_deets : [];

                        $.each(this.current_rank.needs, function(index, value) {
                            $('#needs').append('<div class="d-flex">'+
                                                    '<label class="text-info">'+value.label+':</label>'+  
                                                    '<div class="col-md-4">'+
                                                        '<div class="value">'+value.value+'</div>'+
                                                    '</div>'+
                                                '</div>');
						});

                        $.each(this.current_rank.current_rank_deets, function(index, value) {
                            $('#current-rank-deets').append('<div class="d-flex">'+
                                                    '<label class="text-info">'+value.label+':</label>'+  
                                                    '<div class="col-md-4">'+
                                                        '<div class="value">'+value.value+'</div>'+
                                                    '</div>'+
                                                '</div>');
						});

                        //this.dtStatusHistory.rows.add(typeof details.referral_points_details !== "undefined" ? details.referral_points_details : []);
                        //this.dtStatusHistory.columns.adjust().draw();
                        //this.dtStatusHistory.responsive.recalc();

                        this.currentRankDetailsState = "loaded";
                    })
                    .catch(error => {
                        this.currentRankDetailsState = "error";
                    })
            },
            getTitleAchievementBonus() {

                if (this.titleAchievementBonusState === "fetching") return;

                this.titleAchievementBonusState = "fetching";

                this.titleAchievementBonus.ranks = [];
                this.titleAchievementBonus.highestRankId = 0;
                this.titleAchievementBonus.nextBonus = 0;

                this.titleAchievementBonus.doubleBonus.days = 0;
                this.titleAchievementBonus.doubleBonus.hours = 0;
                this.titleAchievementBonus.doubleBonus.rank = null;

                client.get("member/dashboard/title-achievement-bonus-details")
                    .then(response => {
                        let details = response.data;

                        this.titleAchievementBonus.ranks = details.ranks;
                        this.titleAchievementBonus.highestRankId = details.highest_rank_id;
                        this.titleAchievementBonus.nextBonus = details.next_bonus;

                        this.titleAchievementBonus.doubleBonus.days = details.double_bonus.days;
                        this.titleAchievementBonus.doubleBonus.hours = details.double_bonus.hours;
                        this.titleAchievementBonus.doubleBonus.rank = details.double_bonus.next_double_rank_name;

                        this.titleAchievementBonusState = "loaded";
                    })
                    .catch(error => {
                        this.titleAchievementBonusState = "error";
                    })
			},
			getLastThreeMonthsEarnings() {
                client.get("member/dashboard/three-month-earning")
                    .then(response => {
						let details = response.data;
						

                        $.each(details, function(key, value) {
                            $('#last-three-months').append('<div class="d-flex">'+
												'<label class="text-info">'+key+':</label>'+
													'<div class="col-md-6">'+
													'<div class="value">'+value.earnings+'</div>'+
												'</div>'+
											'</div>');
                        });
                    })
                    .catch(error => {
                    })
			},
			getQualificationRequirementDetails() {
                client.get("member/dashboard/my-requirements")
                    .then(response => {
						let details = response.data;

						this.qualified.is_qualified = details.qualified_text;
						this.qualified.requirements = details.qualified_requirement;
                    })
                    .catch(error => {
                    })
			},
            showStatusHistory() {
                $('#modal-status-history').modal({backdrop: 'static', keyboard: false});
            },
        },
        computed: {
            isRankLoaded() {
                return this.currentRankDetailsState === 'loaded';
            },
            isAchievementLoaded() {
                return this.titleAchievementBonusState === "loaded";
            },
        }
    });

}(jQuery, window.commissionEngine.API_URL, Vue, swal, axios, window.location));