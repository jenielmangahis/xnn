<?php


namespace Commissions\CommissionTypes;


use Commissions\Contracts\CommissionTypeInterface;
use Carbon\Carbon;

class MonthlyImmediateEarningsTrueUp extends CommissionType implements CommissionTypeInterface
{

    public function count()
    {
        return count($this->getQualifiedAssociates());
    }

    public function generateCommission($start, $length)
    {
        $qualified_associates = $this->getQualifiedAssociates($start, $length);

        foreach ($qualified_associates as $associate) {

            $payee_id = +$associate['user_id'];
            $months = explode(",", $associate['months']);

            foreach ($months as $month) {
                $energy_accounts = $this->getApprovedEnergyAccounts($payee_id, $month);

                $approved_count = count($energy_accounts);

                $bonus = $this->getBonus($approved_count);

                if($bonus === 0) {
                    $this->log("Member ID $payee_id does not achieved the minimum number of approved account for period $month");
                    break;
                };

                $this->log("Member ID $payee_id's approved count for $month: $approved_count");

                foreach ($energy_accounts as $account) {

                    $energy_account_id = $account['energy_account_id'];
                    $user_id = $account['user_id'];
                    $generated_bonus = +$account['generated_bonus'];
                    $reference_id = $account['reference_id'];
                    $enrolled_date = $account['enrolled_date'];
                    $approved_date = $account['approved_date'];

                    $amount = $bonus - $generated_bonus;

                    if($amount <= 0) continue;

                    $this->log("Member ID $payee_id earns $amount from Member ID $user_id (Reference ID: $reference_id, Enrolled: $enrolled_date, Approved: $approved_date)");

                    $this->insertPayout(
                        $payee_id,
                        $user_id,
                        $amount,
                        100,
                        $amount,
                        "Approved Count: $approved_count, Previous Bonus: $generated_bonus, Reference ID: $reference_id, Enrolled: $enrolled_date, Approved: $approved_date",
                        $energy_account_id,
                        1,
                        $payee_id
                    );

                }

            }

            $this->log();
        }
    }

    private function getBonus($approved_count)
    {
        if($approved_count >= 16) return 15;
        elseif($approved_count >= 11) return 10;
        elseif($approved_count >= 7) return 5;
        else return 0;
    }


    private function getApprovedEnergyAccounts($user_id, $month)
    {
        $end_date = $this->getPeriodEndDate();
        $start_date = Carbon::createFromFormat("Y-m-d", $month)->startOfMonth()->format("Y-m-d");
        $status = 4;

        $sql = "
            SELECT 
                a.customer_id AS user_id,
                IFNULL(SUM(p.amount), 0) generated_bonus,
                DATE(a.created_at) enrolled_date,
                l.created_date approved_date,
                a.reference_id,
                a.id energy_account_id
            FROM cm_energy_account_logs l
            JOIN cm_energy_accounts a ON a.id = l.energy_account_id
            LEFT JOIN cm_commission_payouts p ON p.transaction_id = a.id
            LEFT JOIN cm_commission_periods pr ON pr.id = p.commission_period_id AND pr.is_locked = 0 AND pr.end_date < '$end_date' AND pr.commission_type_id = 2
            WHERE l.created_date BETWEEN '$start_date' AND '$end_date'
                AND l.current_status = $status
                AND l.id = (SELECT l1.id FROM cm_energy_account_logs l1 WHERE l1.energy_account_id = a.id AND l1.current_status = $status ORDER BY l1.created_at ASC LIMIT 1) -- first time approved
                AND a.sponsor_id = $user_id
                AND LAST_DAY(DATE(a.created_at)) = '$month'
            GROUP BY a.id -- changed from customer_id to a.id (by jen 20210326)
            -- HAVING generated_bonus < 15
        ";

        $stmt = $this->db->prepare($sql);

        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }

    private function getQualifiedAssociates($start = null, $length = null)
    {
        $start_date = $this->getPeriodStartDate();
        $end_date = $this->getPeriodEndDate();

        $affiliates = config('commission.member-types.affiliates');
        $customers = config('commission.member-types.customers');
        $status = 4;

        $sql = "
            SELECT
                dr.user_id,
                GROUP_CONCAT(DISTINCT DATE(LAST_DAY(a.created_at)) ORDER BY a.created_at) months
            FROM cm_daily_ranks dr
            JOIN cm_energy_accounts a ON a.sponsor_id = dr.user_id
            JOIN cm_energy_account_logs l ON l.energy_account_id = a.id AND l.created_date BETWEEN '$start_date' AND '$end_date'
            WHERE dr.is_active = 1 -- is qualfied
                AND dr.is_system_active = 1
                AND dr.rank_date = '$end_date'
                AND l.current_status = $status
                AND l.id = (SELECT l1.id FROM cm_energy_account_logs l1 WHERE l1.energy_account_id = a.id AND l1.current_status = $status ORDER BY l1.created_at ASC LIMIT 1) -- first time approved
            GROUP BY dr.user_id
            ORDER BY dr.user_id ASC
        ";

        if ($start !== null) {
            $sql .= " LIMIT {$start}, {$length}";
        }

        $stmt = $this->db->prepare($sql);

        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
}